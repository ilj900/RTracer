#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"
#include "random.h"

layout (location = 0) rayPayloadEXT FLightHitPayload LightHitPayload;

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_TLAS_INDEX) uniform accelerationStructureEXT TLAS;

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_IMPORTANCE_BUFFER_INDEX) buffer IBLImportanceBufferObject
{
    uvec2 IBLImportanceBuffer[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_IMAGE_SAMPLER_INDEX) uniform sampler2D IBLTextureSampler;

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_WEIGHTS_BUFFER_INDEX) buffer IBLWeightsBufferObject
{
    float IBLWeightsBuffer[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_NORMAL_AOV_BUFFER_INDEX) buffer NormalAOVDataBufferObject
{
    vec4 NormalAOVData[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_WORLD_SPACE_POSITION_AOV_BUFFER_INDEX) buffer WorldSpacePositionAOVDataBufferObject
{
    vec4 WorldSpacePositionAOVData[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_TRANSFORM_INDEX_BUFFER_INDEX) buffer TransformIndexBufferObject
{
    uint TransformIndexBuffer[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_DEVICE_TRANSFORM_BUFFER_INDEX) buffer DeviceTransformBufferObject
{
    FDeviceTransform DeviceTransformBuffer[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_SAMPLED_IBL_BUFFER_INDEX) buffer SampledIBLBufferObject
{
    vec4 SampledIBLBuffer[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_PIXEL_INDEX_BUFFER) buffer PixelIndexIndexMapBufferObject
{
    uint PixelIndexIndexMap[];
};

layout (set = RAYTRACE_SAMPLE_IBL_LAYOUT_INDEX, binding = RAYTRACE_SAMPLE_IBL_RENDER_ITERATION_BUFFER_INDEX) buffer RenderIterationBufferObject
{
    uint RenderIteration;
};

layout (push_constant) uniform PushConstantsBlock
{
    FViewportResolutionPushConstants PushConstants;
};

void main()
{
    uint OriginalPixelIndex = gl_LaunchIDEXT.x;
    uint NewPixelIndex = PixelIndexIndexMap[OriginalPixelIndex];

    FSamplingState SamplingState = FSamplingState(RenderIteration, 0, 0, NewPixelIndex, SAMPLE_TYPE_LIGHT);
    /// Select a random UV
    const vec2 SampleUV = Sample2DUnitQuad(SamplingState);
    const uvec2 IBLSize = textureSize(IBLTextureSampler, 0);
    const uint SampleIndex = uint(IBLSize.x * IBLSize.y * SampleUV.y) + uint(IBLSize.x * SampleUV.x);
    /// Get the interval of pixels that we want to sample
    uvec2 ImportanceSampleInterval = IBLImportanceBuffer[SampleIndex];
    /// Get texel index
    uint TexelIndex = ImportanceSampleInterval.x + uint(float((ImportanceSampleInterval.y - ImportanceSampleInterval.x)) * RandomFloat(SamplingState));
    /// Transform texel index into actual UV coordinates
    vec2 UVCoordinates = vec2((float(TexelIndex % IBLSize.x) + 0.5) / float(IBLSize.x), (float(TexelIndex / IBLSize.x) + 0.5) / float(IBLSize.y));
    /// Map them to spherical coordinates
    vec2 SphericalCoordinates = UVCoordinates * vec2(M_2_PI, M_PI);
    SphericalCoordinates.x -= M_PI_2;
    vec3 CartesianCoordinates;
    CartesianCoordinates.x = sin(SphericalCoordinates.y) * cos(SphericalCoordinates.x);
    CartesianCoordinates.y = cos(SphericalCoordinates.y);
    CartesianCoordinates.z = sin(SphericalCoordinates.y) * sin(SphericalCoordinates.x);

#ifdef DEBUG_PRINTF
    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

    if (NewPixelCoords.x == PushConstants.Width / 2 && NewPixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
        //debugPrintfEXT("CartesianCoordinates1 is %f, %f, %f\n", CartesianCoordinates1.x, CartesianCoordinates1.y, CartesianCoordinates1.z);
        //debugPrintfEXT("RandomFloat is %f\n", f);
    }
#endif

    vec4 FragmentNormal = NormalAOVData[NewPixelIndex];
    FragmentNormal.xyz = FragmentNormal.w == 1 ? FragmentNormal.xyz : -FragmentNormal.xyz;

    /// Otherwise we prepare the ray for calculations
    FRayData RayData;
    RayData.RayFlags = 0;
    RayData.Direction.xyz = CartesianCoordinates;
    RayData.Origin.xyz = WorldSpacePositionAOVData[NewPixelIndex].xyz;

    /// Trace the ray
    traceRayEXT(TLAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, RayData.Origin.xyz, 0.000001f, RayData.Direction.xyz, 10000, 0);

    /// And if we didn't hit any geometry, then we sample the IBL
    if (LightHitPayload.PayloadFlags == 0)
    {
        float Weight = IBLWeightsBuffer[TexelIndex];
        /// In "w" component we store cosine of the angle between the normal and sampled direction
        SampledIBLBuffer[NewPixelIndex] = vec4(texture(IBLTextureSampler, UVCoordinates).xyz * Weight, clamp(dot(FragmentNormal.xyz, RayData.Direction.xyz), 0., 1.));
    }
    else
    {
        SampledIBLBuffer[NewPixelIndex] = vec4(0);
    }
}
