#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = MATERIAL_SORT_COMPUTE_OFFSETS_LAYOUT_INDEX, binding = MATERIAL_SORT_MATERIALS_COUNT_PER_CHUNK_BUFFER) buffer MaterialsCountPerChunkBufferObject
{
    uint MaterialsCountPerChunk[];
};

layout (set = MATERIAL_SORT_COMPUTE_OFFSETS_LAYOUT_INDEX, binding = MATERIAL_SORT_TOTAL_MATERIAL_OFFSETS_BUFFER) buffer MaterialsOffsetsBufferObject
{
    uint MaterialOffsets[];
};

layout (set = MATERIAL_SORT_COMPUTE_OFFSETS_LAYOUT_INDEX, binding = MATERIAL_SORT_MATERIALS_OFFSETS_PER_CHUNK_BUFFER) buffer MaterialsOffsetsPerChunkBufferObject
{
    uint MaterialsOffsetsPerChunk[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstantsOffsets PushConstantsOffsets;
};

layout (local_size_x = TOTAL_MATERIALS, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint MaterialIndex = gl_GlobalInvocationID.x;
    uint CurrentIndex = MaterialIndex * PushConstantsOffsets.MaxGroupSize + PushConstantsOffsets.GroupIndex;

    if (PushConstantsOffsets.GroupIndex == 0)
    {
        MaterialsOffsetsPerChunk[MaterialIndex * PushConstantsOffsets.MaxGroupSize] = 0u;
    }
    else
    {
        uint PreviousIndex = CurrentIndex - 1;
        MaterialsOffsetsPerChunk[CurrentIndex] = MaterialsOffsetsPerChunk[PreviousIndex] + MaterialsCountPerChunk[PreviousIndex];
    }

    MaterialOffsets[MaterialIndex * 3] += MaterialsCountPerChunk[CurrentIndex];
}