#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : enable // ?

vec4 DebugGlobal0 = vec4(0);
vec4 DebugGlobal1 = vec4(0);
vec4 DebugGlobal2 = vec4(0);
vec4 DebugGlobal3 = vec4(0);
vec4 DebugGlobal4 = vec4(0);
vec4 DebugGlobal5 = vec4(0);
vec4 DebugGlobal6 = vec4(0);
vec4 DebugGlobal7 = vec4(0);

struct FShadingData
{
    /// Direction from the camera to the intersection point
    vec3 WorldSpaceIncomingDirection;
    /// Direction from the surface
    vec3 WorldSpaceOutgoingDirection;
    vec3 TangentSpaceIncomingDirection;
    vec3 TangentSpaceOutgoingDirection;
    vec3 NormalInWorldSpace;
    vec3 NormalInTangentSpace;
    vec3 IntersectionCoordinatesInWorldSpace;
    vec2 UVCoordinates;
    mat3 TNBMatrix;
    mat3 TransposedTNBMatrix;
    float MaterialScatteringPDF;
    /// cos(angle) between normal and view direction
    float NDotI;
    bool bFrontFacing;
    bool IsScatteredRaySingular;
    uint MaterialInteractionType;
};

//#define DEBUG_PRINTF
#include "debug.h"
#include "common_defines.h"
#include "common_structures.h"
#include "random.h"

FShadingData ShadingData;
FDeviceMaterial Material;

#include "glsl_math.h"
#include "bxdf.h"
#include "process_material_interaction.h"

layout (location = 0) rayPayloadEXT FHitPayload HitPayload;

/// Set 0
layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_TLAS_INDEX) uniform accelerationStructureEXT TLAS;

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_TEXTURE_SAMPLER) uniform sampler Sampler;

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_FLOAT_TEXTURE_ARRAY) uniform texture2D Textures[MAX_TEXTURES];
layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_UINT_TEXTURE_ARRAY) uniform utexture2D UTextures[MAX_TEXTURES];
layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_INT_TEXTURE_ARRAY) uniform itexture2D ITextures[MAX_TEXTURES];

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_IBL_IMPORTANCE_BUFFER_INDEX) buffer IBLImportanceBufferObject
{
    FDeviceAliasTableEntry IBLImportanceBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_IBL_IMAGE_SAMPLER_INDEX) uniform sampler2D IBLTextureSamplerLinear;

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_IBL_WEIGHTS_BUFFER_INDEX) buffer IBLPDFBufferObject
{
    float IBLPDFBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_RENDER_ITERATION_BUFFER_INDEX) buffer RenderIterationBufferObject
{
    uint RenderIteration;
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayDataBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_HITS_BUFFER_INDEX) buffer HitsBufferObject
{
    FHit Hits[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_MATERIALS_OFFSETS) buffer MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_PIXEL_INDEX_BUFFER) buffer PixelIndexIndexMapBufferObject
{
    uint PixelIndexIndexMap[];
};

/// TODO: Rename this buffer
layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_CUMULATIVE_MATERIAL_COLOR_BUFFER_INDEX) buffer CumulativeMaterialColorBufferObject
{
    vec4 CumulativeMaterialColorBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_NORMAL_BUFFER) buffer NormalBufferObject
{
    vec4 NormalBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_UTILITY_BUFFER_INDEX) uniform UtilityDataUniformBufferObject
{
    FUtilityData UtilityData;
};

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_COLOR_AOV_IMAGE_INDEX, rgba32f) uniform image2D OutcomingImage;

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_AOV_RGBA32F_IMAGE_INDEX, rgba32f) uniform image2D AOV_RGBA32F_Image;

layout (set = MASTER_SHADER_LAYOUT_STATIC_INDEX, binding = MASTER_SHADER_MATERIAL_SYSTEM_DATA_BUFFER_INDEX) buffer MaterialSystemDataBufferObject
{
    float MaterialSystemDataBuffer[];
};

/// Set 1 (for each new render
layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_DIRECTIONAL_LIGHTS_BUFFER_INDEX) buffer DirectionalLightsBufferObject
{
    FDirectionalLight DirectionalLightsBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_DIRECTIONAL_LIGHTS_IMPORTANCE_BUFFER_INDEX) buffer DirectionalLightsImportanceBufferObject
{
    FDeviceAliasTableEntry DirectionalLightsImportanceBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_SPOT_LIGHTS_BUFFER_INDEX) buffer SpotLightsBufferObject
{
    FSpotLight SpotLightsBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_SPOT_LIGHTS_IMPORTANCE_BUFFER_INDEX) buffer SpotLightsImportanceBufferObject
{
    FDeviceAliasTableEntry SpotLightsImportanceBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_POINT_LIGHTS_BUFFER_INDEX) buffer PointLightsBufferObject
{
    FPointLight PointLightsBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_POINT_LIGHTS_IMPORTANCE_BUFFER_INDEX) buffer PointLightsImportanceBufferObject
{
    FDeviceAliasTableEntry PointLightsImportanceBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_AREA_LIGHTS_BUFFER_INDEX) buffer AreaLightsBufferObject
{
    FAreaLight AreaLightsBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_AREA_LIGHTS_IMPORTANCE_BUFFER_INDEX) buffer AreaLightsImportanceBufferObject
{
    FDeviceAliasTableEntry AreaLightsImportanceBuffer[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_RENDERABLES_BUFFER_INDEX) buffer RenderablesBufferObject
{
    FRenderable Renderables[];
};

layout (set = MASTER_SHADER_LAYOUT_INDEX_PER_FRAME, binding = MASTER_SHADER_TRANSFORMS_BUFFER_INDEX) buffer TransformsBufferObject
{
    FDeviceTransform DeviceTransforms[];
};

layout (buffer_reference, scalar) buffer Vertices
{
    FDeviceVertex V[];
};

layout (buffer_reference, scalar) buffer Indices
{
    int I[];
};

layout (buffer_reference, scalar) buffer AreaLightsAliasTableReference
{
    FDeviceAliasTableEntry T[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

bool CheckFlag(uint Mask, uint Field)
{
    return (Mask & Field) == Field;
}

bool IsIndexed(FRenderable Renderable)
{
    return CheckFlag(Renderable.RenderablePropertyMask, RENDERABLE_IS_INDEXED);
}

FVertex UnpackDeviceVertex(FDeviceVertex DV)
{
    FVertex V;
    V.Position.x = DV.A.x;
    V.Position.y = DV.A.y;
    V.Position.z = DV.A.z;
    V.Normal.x = DV.A.w;
    V.Normal.y = DV.B.x;
    V.Normal.z = DV.B.y;
    V.TexCoord.x = DV.B.z;
    V.TexCoord.y = DV.B.w;
    return V;
}

float SampleFloat(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(sampler2D(Textures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).r;
}

vec2 SampleVec2(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(sampler2D(Textures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).rg;
}

vec3 SampleVec3(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(sampler2D(Textures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).rgb;
}

vec4 SampleVec4(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(sampler2D(Textures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).rgba;
}

uint SampleUint(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(usampler2D(UTextures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).r;
}

int SampleInt(uint MaterialIndex, uint TextureFieldOffset, vec2 TextureCoords)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + TextureFieldOffset;
    uint TextureIndex = floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
    return texture(isampler2D(ITextures[nonuniformEXT(TextureIndex)], Sampler), TextureCoords).r;
}

float SampleFloat(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return MaterialSystemDataBuffer[TotalOffset];
}

vec2 SampleVec2(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return vec2(MaterialSystemDataBuffer[TotalOffset], MaterialSystemDataBuffer[TotalOffset + 1]);
}

vec3 SampleVec3(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return vec3(MaterialSystemDataBuffer[TotalOffset], MaterialSystemDataBuffer[TotalOffset + 1], MaterialSystemDataBuffer[TotalOffset + 2]);
}

vec4 SampleVec4(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return vec4(MaterialSystemDataBuffer[TotalOffset], MaterialSystemDataBuffer[TotalOffset + 1], MaterialSystemDataBuffer[TotalOffset + 2], MaterialSystemDataBuffer[TotalOffset + 3]);
}

uint SampleUint(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return floatBitsToUint(MaterialSystemDataBuffer[TotalOffset]);
}

int SampleInt(uint MaterialIndex, uint MaterialFieldOffset)
{
    uint TotalOffset = MaterialIndex * SIZE_OF_DEVICE_MATERIAL_STRUCT + MaterialFieldOffset;
    return floatBitsToInt(MaterialSystemDataBuffer[TotalOffset]);
}

vec3 SRGBToLinear(vec3 SRGBColor) {
    vec3 bLess = step(vec3(0.04045f), SRGBColor);
    vec3 Low  = SRGBColor / 12.92f;
    vec3 High = pow((SRGBColor + 0.055f) / 1.055f, vec3(2.4f));
    return mix(Low, High, bLess);
}

vec3 LinearToSRGB(vec3 LinearColor) {
    vec3 bLess = step(vec3(0.0031308f), LinearColor);
    vec3 Low  = LinearColor * 12.92f;
    vec3 High = 1.055 * pow(LinearColor, vec3(1.f/2.4f)) - 0.055f;
    return mix(Low, High, bLess);
}

FDeviceMaterial GetMaterial(vec2 TextureCoords);
FDeviceMaterial GetEmissiveMaterial(vec2 TextureCoords, uint MaterialIndex);

void ComputeShadingData(FRenderable Renderable, FHit Hit, FDeviceTransform Transform, FRayData RayData)
{
    Vertices Verts = Vertices(Renderable.VertexBufferAddress);
    Indices Inds = Indices(Renderable.IndexBufferAddress);
    vec3 Barycentrics = vec3(1.0 - Hit.HitUV.x - Hit.HitUV.y, Hit.HitUV.x, Hit.HitUV.y);

    FDeviceVertex DV0;
    FDeviceVertex DV1;
    FDeviceVertex DV2;

    if (IsIndexed(Renderable))
    {
        uint I0 = 0;
        uint I1 = 1;
        uint I2 = 2;

        I0 = Inds.I[Hit.PrimitiveIndex * 3];
        I1 = Inds.I[Hit.PrimitiveIndex * 3 + 1];
        I2 = Inds.I[Hit.PrimitiveIndex * 3 + 2];

        DV0 = Verts.V[I0];
        DV1 = Verts.V[I1];
        DV2 = Verts.V[I2];
    }
    else
    {
        uint Index = Hit.PrimitiveIndex * 3;
        DV0 = Verts.V[Index];
        DV1 = Verts.V[Index + 1];
        DV2 = Verts.V[Index + 2];
    }

    FVertex V0 = UnpackDeviceVertex(DV0);
    FVertex V1 = UnpackDeviceVertex(DV1);
    FVertex V2 = UnpackDeviceVertex(DV2);

    ShadingData.WorldSpaceIncomingDirection = RayData.Direction.xyz;

    ShadingData.NormalInWorldSpace = (V0.Normal * Barycentrics.x + V1.Normal * Barycentrics.y + V2.Normal * Barycentrics.z);
    /// Pay more attention to why vector * matrix, and not vice versa
    ShadingData.NormalInWorldSpace = ShadingData.NormalInWorldSpace * mat3(Transform.InverseModelMatrix);
    ShadingData.NormalInWorldSpace = normalize(ShadingData.NormalInWorldSpace);

    /// -ShadingData.WorldSpaceIncomingDirection Because we need a direction from the intersection point
    ShadingData.NDotI = dot(ShadingData.NormalInWorldSpace, -ShadingData.WorldSpaceIncomingDirection);

    /// Invert normal if it's facing backwards
    if (ShadingData.NDotI < 0)
    {
        ShadingData.bFrontFacing = false;
        ShadingData.NormalInWorldSpace = -ShadingData.NormalInWorldSpace;
        ShadingData.NDotI = abs(ShadingData.NDotI);
    }
    else
    {
        ShadingData.bFrontFacing = true;
    }

    ShadingData.TNBMatrix = CreateTNBMatrix(ShadingData.NormalInWorldSpace);
    ShadingData.TransposedTNBMatrix = transpose(ShadingData.TNBMatrix);

    ShadingData.WorldSpaceIncomingDirection = RayData.Direction.xyz;
    ShadingData.TangentSpaceIncomingDirection = ShadingData.WorldSpaceIncomingDirection * ShadingData.TNBMatrix;

    ShadingData.IntersectionCoordinatesInWorldSpace = V0.Position * Barycentrics.x + V1.Position * Barycentrics.y + V2.Position * Barycentrics.z;
    ShadingData.IntersectionCoordinatesInWorldSpace = vec3(vec4(ShadingData.IntersectionCoordinatesInWorldSpace, 1.f) * Transform.ModelMatrix);

    /// TODO: Can Hit.HitUV just be used?
    ShadingData.UVCoordinates = V0.TexCoord * Barycentrics.x + V1.TexCoord * Barycentrics.y + V2.TexCoord * Barycentrics.z;
    ShadingData.MaterialInteractionType = 0u;
}

#include "lighting.h"
#include "utility.h"

void main()
{
    /// Find actual pixel we are working with
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_LaunchIDEXT.x;
    uint PixelIndex = PixelIndexIndexMap[OriginalPixelIndex];
    uvec2 PixelCoords = uvec2(PixelIndex % PushConstants.Width, PixelIndex / PushConstants.Width);

#ifdef DEBUG_PRINTF
    if (PixelCoords.x == PushConstants.Width / 2 && PixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
    }
#endif

#ifdef DEBUG_ONLY_FIRST_BOUNCE
    if (PushConstants.BounceIndex != 0)
    {
        b = false;
    }
#endif

    //DP1("Bounse: %i\n", PushConstants.BounceIndex);

    /// Fetch required data
    FRayData RayData = RayDataBuffer[PixelIndex];
    FHit Hit = Hits[PixelIndex];
    FRenderable Renderable = Renderables[Hit.RenderableIndex];
    FDeviceTransform Transform = DeviceTransforms[Renderable.TransformIndex];
    ComputeShadingData(Renderable, Hit, Transform, RayData);
    float Depth = length(ShadingData.IntersectionCoordinatesInWorldSpace - RayData.Origin.xyz) * 0.0001f;

    /// Fetch material data
    Material = GetMaterial(ShadingData.UVCoordinates);
    Material.SpecularRoughness = clamp(Material.SpecularRoughness, 0.001, 1.f);
    /// Process material interaction
    FSamplingState SamplingState = FSamplingState(RenderIteration, PushConstants.BounceIndex, 0, PixelIndex, SAMPLE_TYPE_GENERATE_RAYS);
    ShadingData.MaterialScatteringPDF = ScatterMaterial(Material, ShadingData.MaterialInteractionType, RayData, SamplingState, ShadingData.bFrontFacing);
    /// If we hit emissive material on the first hit, just output it, nothing else to do here
    if (PushConstants.BounceIndex == 0 && ShadingData.MaterialInteractionType == EMISSION_LAYER)
    {
        RayDataBuffer[PixelIndex].RayFlags = RAY_DATA_RAY_MISSED;
        imageStore(OutcomingImage, ivec2(PixelCoords), vec4(Material.EmissionColor , 1));
        return;
    }

    vec3 BxDF = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ShadingData.WorldSpaceOutgoingDirection);
    vec3 ThroughputForThisBounce = BxDF * ShadingData.NDotI / ShadingData.MaterialScatteringPDF;

    vec3 ThroughputBeforeThisBounce = CumulativeMaterialColorBuffer[PixelIndex].xyz;
    CumulativeMaterialColorBuffer[PixelIndex] = vec4(ThroughputBeforeThisBounce * ThroughputForThisBounce, 1);

    RayData.Direction.xyz = ShadingData.WorldSpaceOutgoingDirection;
    RayData.Origin.xyz = ShadingData.IntersectionCoordinatesInWorldSpace;
    RayData.RayFlags = (ShadingData.MaterialInteractionType & 0x0000FFFE) | (RayData.RayFlags & ~0x0000FFFE);

    /// Sample point light
    vec3 PointLightResult = vec3(0);
    vec3 DirectionalLightResult = vec3(0);
    vec3 SpotLightResult = vec3(0);
    vec3 AreaLightResult = vec3(0);
    vec3 IBLResult = vec3(0);
    vec3 TotalIncomingLight = vec3(0);
    SamplingState = FSamplingState(RenderIteration, PushConstants.BounceIndex, 0, PixelIndex, SAMPLE_TYPE_LIGHT);

    if (UtilityData.ActivePointLightsCount != 0 && !ShadingData.IsScatteredRaySingular)
    {
        vec4 UniformPointLightSamplingResult = vec4(0);
        vec4 ImportancePointLightSamplingResult = vec4(0);
        vec3 UniformOutgoingDirection = vec3(0);
        vec3 ImportanceOutgoingDirection = vec3(0);
        float UniformSamplingImportanceSamplePDF = 0;
        float ImportanceSamplingUniformSamplePDF = 0;

        UniformPointLightSamplingResult = ComputeUniformPointLightInput(SamplingState, UtilityData.ActivePointLightsCount, UniformOutgoingDirection, UniformSamplingImportanceSamplePDF);
        ImportancePointLightSamplingResult = ComputeImportancePointLightInput(SamplingState, UtilityData.ActivePointLightsCount, ImportanceOutgoingDirection, ImportanceSamplingUniformSamplePDF);

        vec3 MaterialInteractionEvaluationResultUniformSampling = vec3(0); /// Interaction result of uniformly sampled point light and the surface
        vec3 MaterialInteractionEvaluationResultImportanceSampling = vec3(0); /// Interaction result of importance sampled point light and the surface

        float W1 = 0;
        float W2 = 0;

        if (UniformPointLightSamplingResult.w > 0.)
        {
            MaterialInteractionEvaluationResultUniformSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, UniformOutgoingDirection);
            MaterialInteractionEvaluationResultUniformSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultUniformSampling * UniformPointLightSamplingResult.xyz;
            W1 = UniformPointLightSamplingResult.w / (UniformPointLightSamplingResult.x + UniformSamplingImportanceSamplePDF);
        }

        if (ImportancePointLightSamplingResult.w > 0.)
        {
            MaterialInteractionEvaluationResultImportanceSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ImportanceOutgoingDirection);
            MaterialInteractionEvaluationResultImportanceSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultImportanceSampling * ImportancePointLightSamplingResult.xyz;
            W2 = ImportancePointLightSamplingResult.w / (ImportancePointLightSamplingResult.w + ImportanceSamplingUniformSamplePDF);
        }

        PointLightResult = W1 * MaterialInteractionEvaluationResultUniformSampling + W2 * MaterialInteractionEvaluationResultImportanceSampling;
        TotalIncomingLight += UniformPointLightSamplingResult.xyz + ImportancePointLightSamplingResult.xyz;
    }

    /// Sample Directional light
    if (UtilityData.ActiveDirectionalLightsCount != 0 && !ShadingData.IsScatteredRaySingular)
    {
        vec4 UniformDirectionalLightSamplingResult = vec4(0);
        vec4 ImportanceDirectionalLightSamplingResult = vec4(0);
        vec3 UniformOutgoingDirection = vec3(0);
        vec3 ImportanceOutgoingDirection = vec3(0);
        float UniformSamplingImportanceSamplePDF = 0;
        float ImportanceSamplingUniformSamplePDF = 0;

        UniformDirectionalLightSamplingResult = ComputeUniformDirectionalLightInput(SamplingState, UtilityData.ActiveDirectionalLightsCount, UniformOutgoingDirection, UniformSamplingImportanceSamplePDF);
        ImportanceDirectionalLightSamplingResult = ComputeImportanceDirectionalLightInput(SamplingState, UtilityData.ActiveDirectionalLightsCount, ImportanceOutgoingDirection, ImportanceSamplingUniformSamplePDF);

        vec3 MaterialInteractionEvaluationResultUniformSampling = vec3(0); /// Interaction result of uniformly sampled directional light and the surface
        vec3 MaterialInteractionEvaluationResultImportanceSampling = vec3(0); /// Interaction result of importance sampled directional light and the surface

        float W1 = 0;
        float W2 = 0;

        if (UniformDirectionalLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResultUniformSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, UniformOutgoingDirection);
            MaterialInteractionEvaluationResultUniformSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultUniformSampling * UniformDirectionalLightSamplingResult.xyz;
            W1 = UniformDirectionalLightSamplingResult.w / (UniformDirectionalLightSamplingResult.x + UniformSamplingImportanceSamplePDF);
        }

        if (ImportanceDirectionalLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResultImportanceSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ImportanceOutgoingDirection);
            MaterialInteractionEvaluationResultImportanceSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultImportanceSampling * ImportanceDirectionalLightSamplingResult.xyz;
            W2 = ImportanceDirectionalLightSamplingResult.w / (ImportanceDirectionalLightSamplingResult.w + ImportanceSamplingUniformSamplePDF);
        }

        DirectionalLightResult = W1 * MaterialInteractionEvaluationResultUniformSampling + W2 * MaterialInteractionEvaluationResultImportanceSampling;
        TotalIncomingLight += UniformDirectionalLightSamplingResult.xyz + ImportanceDirectionalLightSamplingResult.xyz;
    }

    if(UtilityData.ActiveSpotLightsCount != 0 && !ShadingData.IsScatteredRaySingular)
    {
        vec4 UniformSpotLightSamplingResult = vec4(0);
        vec4 ImportanceSpotLightSamplingResult = vec4(0);
        vec3 UniformOutgoingDirection = vec3(0);
        vec3 ImportanceOutgoingDirection = vec3(0);
        float UniformSamplingImportanceSamplePDF = 0;
        float ImportanceSamplingUniformSamplePDF = 0;

        UniformSpotLightSamplingResult = ComputeUniformSpotLightInput(SamplingState, UtilityData.ActiveSpotLightsCount, UniformOutgoingDirection, UniformSamplingImportanceSamplePDF);
        ImportanceSpotLightSamplingResult = ComputeImportanceSpotLightInput(SamplingState, UtilityData.ActiveSpotLightsCount, ImportanceOutgoingDirection, ImportanceSamplingUniformSamplePDF);

        vec3 MaterialInteractionEvaluationResultUniformSampling = vec3(0); /// Interaction result of uniformly sampled directional light and the surface
        vec3 MaterialInteractionEvaluationResultImportanceSampling = vec3(0); /// Interaction result of importance sampled directional light and the surface

        float W1 = 0;
        float W2 = 0;

        if (UniformSpotLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResultUniformSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, UniformOutgoingDirection);
            MaterialInteractionEvaluationResultUniformSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultUniformSampling * UniformSpotLightSamplingResult.xyz;
            W1 = UniformSpotLightSamplingResult.w / (UniformSpotLightSamplingResult.x + UniformSamplingImportanceSamplePDF);
        }

        if (ImportanceSpotLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResultImportanceSampling = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ImportanceOutgoingDirection);
            MaterialInteractionEvaluationResultImportanceSampling = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResultImportanceSampling * ImportanceSpotLightSamplingResult.xyz;
            W2 = ImportanceSpotLightSamplingResult.w / (ImportanceSpotLightSamplingResult.w + ImportanceSamplingUniformSamplePDF);
        }

        SpotLightResult = W1 * MaterialInteractionEvaluationResultUniformSampling + W2 * MaterialInteractionEvaluationResultImportanceSampling;
        TotalIncomingLight += UniformSpotLightSamplingResult.xyz + ImportanceSpotLightSamplingResult.xyz;
    }

    bool bBRDFAreaLightSamplingSuccessful = false;

    if (UtilityData.ActiveAreaLightsCount != 0)
    {
        vec3 UniformOutgoingDirection = vec3(0);
        vec3 ImportanceOutgoingDirection = vec3(0);
        vec3 BXDFOutgoingDirection = ShadingData.WorldSpaceOutgoingDirection; ///We already have bxdf direction
        float UniformSamplingImportancePDF = 0.f;
        float UniformSamplingBXDFPDF = 0.f;
        float ImportanceSamplingUniformPDF = 0.f;
        float ImportanceSamplingBXDFPDF = 0.f;
        float BXDFSamplingUniformPDF = 0.f;
        float BXDFSamplingImportancePDF = 0.f;
        float W1 = 0.f;
        float W2 = 0.f;
        float W3 = 0.f;

        vec4 UniformAreaLightSamplingResult = ComputeUniformAreaLightInput(SamplingState, UniformOutgoingDirection, UniformSamplingImportancePDF, UniformSamplingBXDFPDF);
        vec4 ImportanceAreaLightSamplingResult = ComputeImportanceAreaLightInput(SamplingState, ImportanceOutgoingDirection, ImportanceSamplingUniformPDF, ImportanceSamplingBXDFPDF);
        vec4 BXDFAreaLightSamplingResult = ComputeBXDFAreaLightInput(SamplingState, BXDFOutgoingDirection, ShadingData.MaterialScatteringPDF, BXDFSamplingUniformPDF, BXDFSamplingImportancePDF);

        vec3 MaterialInteractionEvaluationResult1 = vec3(0); /// Interaction result of uniform sampled area light and the surface
        vec3 MaterialInteractionEvaluationResult2 = vec3(0); /// Interaction result of importance sampled area light and the surface
        vec3 MaterialInteractionEvaluationResult3 = vec3(0); /// Interaction result of bxdf sampled area light and the surface

        if (UniformAreaLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResult1 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, UniformOutgoingDirection);
            MaterialInteractionEvaluationResult1 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult1 * UniformAreaLightSamplingResult.xyz;
            W1 = UniformAreaLightSamplingResult.w / (UniformAreaLightSamplingResult.w + UniformSamplingImportancePDF + UniformSamplingBXDFPDF);
        }

        if (ImportanceAreaLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResult2 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ImportanceOutgoingDirection);
            MaterialInteractionEvaluationResult2 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult2 * ImportanceAreaLightSamplingResult.xyz;
            W2 = ImportanceAreaLightSamplingResult.w / (ImportanceAreaLightSamplingResult.w + ImportanceSamplingUniformPDF + ImportanceSamplingBXDFPDF);
        }

        if (BXDFAreaLightSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResult3 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, BXDFOutgoingDirection);
            MaterialInteractionEvaluationResult3 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult3 * BXDFAreaLightSamplingResult.xyz;
            W3 = BXDFAreaLightSamplingResult.w / (BXDFAreaLightSamplingResult.w + BXDFSamplingUniformPDF + BXDFSamplingImportancePDF);
            bBRDFAreaLightSamplingSuccessful = true;
        }

        AreaLightResult = W1 * MaterialInteractionEvaluationResult1 + W2 * MaterialInteractionEvaluationResult2 + W3 * MaterialInteractionEvaluationResult3;
        TotalIncomingLight += UniformAreaLightSamplingResult.xyz + ImportanceAreaLightSamplingResult.xyz + BXDFAreaLightSamplingResult.xyz;
    }

    bool bBRDFIBLSamplingSuccessful = false;

    if (true /*UtilityData.IBLIsActive*/)
    {
        vec3 UniformOutgoingDirection = vec3(0);
        vec3 ImportanceOutgoingDirection = vec3(0);
        vec3 BXDFOutgoingDirection = ShadingData.WorldSpaceOutgoingDirection; ///We already have bxdf direction
        float UniformSamplingImportancePDF = 0.f;
        float UniformSamplingBXDFPDF = 0.f;
        float ImportanceSamplingUniformPDF = 0.f;
        float ImportanceSamplingBXDFPDF = 0.f;
        float BXDFSamplingUniformPDF = 0.f;
        float BXDFSamplingImportancePDF = 0.f;
        float W1 = 0.f;
        float W2 = 0.f;
        float W3 = 0.f;

        vec4 UniformIBLSamplingResult = ShadingData.IsScatteredRaySingular ? vec4(0) : ComputeUniformIBLInput(SamplingState, UniformOutgoingDirection, UniformSamplingImportancePDF, UniformSamplingBXDFPDF);
        vec4 ImportanceIBLSamplingResult = ShadingData.IsScatteredRaySingular ? vec4(0) : ComputeImportanceIBLInput(SamplingState, ImportanceOutgoingDirection, ImportanceSamplingUniformPDF, ImportanceSamplingBXDFPDF);
        vec4 BXDFIBLSamplingResult = ComputeBXDFIBLInput(SamplingState, BXDFOutgoingDirection, ShadingData.MaterialScatteringPDF, BXDFSamplingUniformPDF, BXDFSamplingImportancePDF);

        vec3 MaterialInteractionEvaluationResult1 = vec3(0); /// Interaction result of uniform sampled IBL and the surface
        vec3 MaterialInteractionEvaluationResult2 = vec3(0); /// Interaction result of importance sampled IBL and the surface
        vec3 MaterialInteractionEvaluationResult3 = vec3(0); /// Interaction result of bxdf sampled IBL and the surface

        if (UniformIBLSamplingResult.w != 0 && !ShadingData.IsScatteredRaySingular)
        {
            MaterialInteractionEvaluationResult1 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, UniformOutgoingDirection);
            MaterialInteractionEvaluationResult1 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult1 * UniformIBLSamplingResult.xyz;
            W1 = UniformIBLSamplingResult.w / (UniformIBLSamplingResult.w + UniformSamplingImportancePDF + UniformSamplingBXDFPDF);
        }

        if (ImportanceIBLSamplingResult.w != 0 && !ShadingData.IsScatteredRaySingular)
        {
            MaterialInteractionEvaluationResult2 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, ImportanceOutgoingDirection);
            MaterialInteractionEvaluationResult2 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult2 * ImportanceIBLSamplingResult.xyz;
            W2 = ImportanceIBLSamplingResult.w / (ImportanceIBLSamplingResult.w + ImportanceSamplingUniformPDF + ImportanceSamplingBXDFPDF);
        }

        if (BXDFIBLSamplingResult.w != 0)
        {
            MaterialInteractionEvaluationResult3 = EvaluateMaterialInteraction(Material, ShadingData.MaterialInteractionType, BXDFOutgoingDirection);
            MaterialInteractionEvaluationResult3 = ThroughputBeforeThisBounce * MaterialInteractionEvaluationResult3 * BXDFIBLSamplingResult.xyz;
            W3 = BXDFIBLSamplingResult.w / (BXDFIBLSamplingResult.w + BXDFSamplingUniformPDF + BXDFSamplingImportancePDF);
            bBRDFIBLSamplingSuccessful = true;
        }

        IBLResult = W1 * MaterialInteractionEvaluationResult1 + W2 * MaterialInteractionEvaluationResult2 + W3 * MaterialInteractionEvaluationResult3;
        TotalIncomingLight += UniformIBLSamplingResult.xyz + ImportanceIBLSamplingResult.xyz + BXDFIBLSamplingResult.xyz;
    }

    vec3 BounceInput = vec3(0);
    BounceInput += PointLightResult + DirectionalLightResult + SpotLightResult + AreaLightResult + IBLResult;
    ThroughputBuffer[PixelIndex].xyz = ThroughputBuffer[PixelIndex].xyz + BounceInput;

    MARK(UtilityData.AOVIndex);
    if(PushConstants.BounceIndex == 0)
    {
        SaveAOVs(PixelCoords, ShadingData.NormalInWorldSpace, ShadingData.NormalInWorldSpace, ShadingData.UVCoordinates, ShadingData.IntersectionCoordinatesInWorldSpace, 1., Depth,
                 Material, TotalIncomingLight, Hit.RenderableIndex, Hit.PrimitiveIndex, PushConstants.MaterialIndex);
    }
    if (UtilityData.AOVIndex == AOV_BOUNCE_HEATMAP)
    {
        float T = float(PushConstants.BounceIndex - 1) / float(LAST_BOUNCE);
        vec3 Heat = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), T);
        imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), vec4(Heat, 0));
    }

    if ((PushConstants.BounceIndex == LAST_DIFFUSE_BOUNCE && CheckFlag(RayData.RayFlags, DIFFUSE_LAYER))
    || (PushConstants.BounceIndex == LAST_REFLECTION_BOUNCE && CheckFlag(RayData.RayFlags, SPECULAR_LAYER))
    || (PushConstants.BounceIndex == LAST_REFRACTION_BOUNCE && CheckFlag(RayData.RayFlags, TRANSMISSION_LAYER))
    || (ShadingData.MaterialScatteringPDF <= 0.0001f)
    || bBRDFAreaLightSamplingSuccessful /// If we know that scattered ray hit some area light, no need to process him
    || bBRDFIBLSamplingSuccessful) /// If we know that scattered ray hit IBL, no need to process him
    {
        RayDataBuffer[PixelIndex].RayFlags = RAY_DATA_RAY_MISSED;
        imageStore(OutcomingImage, ivec2(PixelCoords), vec4(ThroughputBuffer[PixelIndex].xyz , 1));
        return;
    }

    if (PushConstants.BounceIndex == LAST_BOUNCE)
    {
        imageStore(OutcomingImage, ivec2(PixelCoords), vec4(ThroughputBuffer[PixelIndex].xyz , 1));
        return;
    }

    RayDataBuffer[PixelIndex] = RayData;
    NormalBuffer[PixelIndex] = vec4(ShadingData.NormalInWorldSpace, 1);
}
