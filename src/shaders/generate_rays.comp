#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = GENERATE_RAYS_LAYOUT_INDEX, binding = CAMERA_RAYS_BUFFER) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = GENERATE_RAYS_LAYOUT_INDEX, binding = CAMERA_POSITION_BUFFER) uniform CameraBufferObject
{
    FDeviceCamera DeviceCamera;
};

layout (set = GENERATE_RAYS_LAYOUT_INDEX, binding = GENERATE_RAYS_PIXEL_INDEX_BUFFER) buffer PixelIndexIndexMapBufferObject
{
    uint PixelIndexIndexMap[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    uvec2 PixelCoords = uvec2(gl_GlobalInvocationID.x % PushConstants.Width, gl_GlobalInvocationID.x / PushConstants.Width);

    if (PixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    const vec2 PixelCenter = PixelCoords + vec2(0.5f);
    const vec2 InUV = PixelCenter * vec2(PushConstants.InvWidth, PushConstants.InvHeight);
    vec2 D = InUV * 2.0f - 1.f;

    vec4 Origin = vec4(DeviceCamera.Origin, 1.f);
    vec4 Target = DeviceCamera.InverseProjectionMatrix * vec4(D.x, D.y, 1.f, 1.f);
    vec4 Direction = DeviceCamera.InverseViewMatrix * vec4(normalize(Target.xyz), 0.f);

    float tMin = 0.001f;
    float tMax = 10000.f;

    RayData[gl_GlobalInvocationID.x] = FRayData(Origin, Direction, 0, tMin, tMax, 0.f);
    PixelIndexIndexMap[gl_GlobalInvocationID.x] = gl_GlobalInvocationID.x;
}