#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = MATERIAL_SORT_COUNT_MATERIALS_INDEX, binding = MATERIAL_SORT_COUNT_MATERIALS_MATERIAL_INDEX_BUFFER) buffer MaterialIndexBufferObject
{
    uint MaterialIndices[];
};

layout (set = MATERIAL_SORT_COUNT_MATERIALS_INDEX, binding = MATERIAL_SORT_COUNT_MATERIALS_MATERIAL_COUNT_BUFFER) buffer MaterialCountBufferObject
{
    uint MaterialCount[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

/// Here we calculate how much of each material we have in each chunk
void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    uint ChunkIndex = PixelIndex / BASIC_CHUNK_SIZE;
    uint MaterialIndex = MaterialIndices[PixelIndex];

    if (MaterialIndex == UINT_MAX)
    {
        /// Last material represents miss (IBL material)
        atomicAdd(MaterialCount[(ChunkIndex * TOTAL_MATERIALS) + TOTAL_MATERIALS - 1], 1);
    }
    else
    {
        atomicAdd(MaterialCount[(ChunkIndex * TOTAL_MATERIALS) + MaterialIndex], 1);
    }
}