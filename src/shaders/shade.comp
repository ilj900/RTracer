#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"
#include "random.h"
#include "process_material_interaction.h"

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_OUTPUT_IMAGE_INDEX, rgba32f) uniform image2D OutcomingImage;

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_TEXTURE_SAMPLER) uniform sampler Sampler;

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_TEXTURE_ARRAY) uniform texture2D Textures[MAX_TEXTURES];

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_IBL_SAMPLING_RESULT_INDEX) buffer SampledIBLBufferObject
{
    vec4 SampledIBLBuffer[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_MATERIAL_INDEX_MAP) buffer MaterialIndexBufferObject
{
    uint MaterialsIndexMap[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_MATERIAL_INDEX_AOV_MAP) buffer MaterialIndexAOVBufferObject
{
    uint MaterialsIndexAOV[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_MATERIALS_OFFSETS) buffer MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_CUMULATIVE_MATERIAL_COLOR_BUFFER_INDEX) buffer CumulativeMaterialColorBufferObject
{
    vec4 CumulativeMaterialColorBuffer[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_RENDER_ITERATION_BUFFER) buffer RenderIterationBufferObject
{
    uint RenderIteration;
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_NORMAL_AOV_DATA_BUFFER) buffer NormalAOVDataBufferObject
{
    vec4 NormalAOVData[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_UV_AOV_DATA_BUFFER) buffer UVAOVDataObject
{
    vec2 UVAOVData[];
};

layout (set = COMPUTE_SHADE_LAYOUT_INDEX, binding = COMPUTE_SHADE_WORLD_SPACE_POSITION_AOV_DATA_BUFFER) buffer WorldSpacePositionAOVDataBufferObject
{
    vec4 WorldSpacePositionAOVData[];
};

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void SetRayData(uint RayIndex, FRayData RayDataIn)
{
    RayData[RayIndex] = RayDataIn;
}

vec3 SampleVec3(uint TextureIndex, vec2 TextureCoords)
{
    return texture(sampler2D(Textures[TextureIndex], Sampler), TextureCoords).rgb;
}

float SampleFloat(uint TextureIndex, vec2 TextureCoords)
{
    return texture(sampler2D(Textures[TextureIndex], Sampler), TextureCoords).r;
}

FDeviceMaterial GetMaterial(vec2 TextureCoords);

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_GlobalInvocationID.x;

    if (OriginalPixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    uint NewPixelIndex = MaterialsIndexMap[OriginalPixelIndex];
    uint MaterialIndex = MaterialsIndexAOV[NewPixelIndex];

    if (MaterialIndex != PushConstants.MaterialIndex)
    {
        return;
    }

    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

#ifdef DEBUG_PRINTF
    if (NewPixelCoords.x == PushConstants.Width / 2 && NewPixelCoords.y == PushConstants.Height / 2 /*&& PushConstants.BounceIndex == 0*/)
    {
        b = true;
        debugPrintfEXT("Bounse: %i\n", PushConstants.BounceIndex);
    }
#endif

    FRayData RayData = FetchRayData(NewPixelIndex);
    vec4 NormalInWorldSpace = NormalAOVData[NewPixelIndex];
    vec2 TextureCoords = UVAOVData[NewPixelIndex];
    vec3 PointOfIntersectionInWorldSpace = WorldSpacePositionAOVData[NewPixelIndex].xyz;
    vec4 IBLSamplingResult = SampledIBLBuffer[NewPixelIndex];

    const bool bFrontFacing = NormalInWorldSpace.w == 1.;

    // Invert normal so that it would face the ray in further calculations
    if (!bFrontFacing)
    {
        NormalInWorldSpace.xyz = -NormalInWorldSpace.xyz;
    }

    float NDotI = dot(NormalInWorldSpace.xyz, RayData.Direction.xyz);

    FDeviceMaterial Material = GetMaterial(TextureCoords);

    FSamplingState SamplingState = FSamplingState(RenderIteration, PushConstants.BounceIndex, 0, NewPixelIndex, SAMPLE_TYPE_GENERATE_RAYS);
    uint RayType = 0;
    vec3 SamplingResult = SampleMaterial(Material, RayData, RayType, NormalInWorldSpace.xyz, SamplingState, bFrontFacing);
    SamplingResult *= abs(NDotI);
    RayData.Origin.xyz = PointOfIntersectionInWorldSpace;

    vec3 CumulativeMaterialColor = CumulativeMaterialColorBuffer[NewPixelIndex].xyz;
    if (b)
    {
        debugPrintfEXT("SamplingResult: %f, %f, %f\n", SamplingResult.x, SamplingResult.y, SamplingResult.z);
        debugPrintfEXT("CumulativeMaterialColor before: %f, %f, %f\n", CumulativeMaterialColor.x, CumulativeMaterialColor.y, CumulativeMaterialColor.z);
        debugPrintfEXT("ThroughputBuffer before: %f, %f, %f\n", ThroughputBuffer[NewPixelIndex].x, ThroughputBuffer[NewPixelIndex].y, ThroughputBuffer[NewPixelIndex].z);
    }
    CumulativeMaterialColor *= SamplingResult;
    CumulativeMaterialColorBuffer[NewPixelIndex] = vec4(CumulativeMaterialColor, 1);

    /// To do: Correct for reflective part of transmission!
    if (RayType != TRANSMISSION_LAYER)
    {
        SamplingResult = CumulativeMaterialColor * IBLSamplingResult.xyz * abs(IBLSamplingResult.w);
    }

    ThroughputBuffer[NewPixelIndex].xyz = ThroughputBuffer[NewPixelIndex].xyz + SamplingResult;

    if (PushConstants.BounceIndex == LAST_BOUNCE)
    {
        imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(ThroughputBuffer[NewPixelIndex].xyz , 1));
    }

    if (b)
    {
        debugPrintfEXT("CumulativeMaterialColor after: %f, %f, %f\n", CumulativeMaterialColor.x, CumulativeMaterialColor.y, CumulativeMaterialColor.z);
        debugPrintfEXT("ThroughputBuffer after: %f, %f, %f\n\n", ThroughputBuffer[NewPixelIndex].x, ThroughputBuffer[NewPixelIndex].y, ThroughputBuffer[NewPixelIndex].z);
    }

    SetRayData(NewPixelIndex, RayData);
}