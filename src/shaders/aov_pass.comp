#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"
#include "random.h"

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_NORMAL_BUFFER) buffer NormalAOVDataBufferObject
{
    vec4 NormalAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_BUFFER) buffer UVAOVDataBufferObject
{
    vec2 UVAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_BUFFER) buffer WorldSpacePositionAOVDataBufferObject
{
    vec4 WorldSpacePositionAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_HITS_BUFFER) buffer HitsBufferObject
{
    FHit HitsBuffer[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_MATERIAL_INDEX_BUFFER) buffer MaterialIndexBufferObject
{
    uint MaterialIndexBuffer[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_DEBUG_LAYER_BUFFER) buffer DebugLayerBufferObject
{
    vec4 DebugLayerData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_SHADING_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D ShadingNormalAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_GEOMETRIC_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D GeometricNormalAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_AOV_IMAGE_INDEX, rg32f) uniform image2D UVAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_AOV_IMAGE_INDEX, rgba32f) uniform image2D WorldSpacePositionAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_OPACITY_AOV_IMAGE_INDEX, rgba32f) uniform image2D OpacityAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_DEPTH_AOV_IMAGE_INDEX, rgba32f) uniform image2D DepthAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_ALBEDO_AOV_IMAGE_INDEX, rgba32f) uniform image2D AlbedoAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_LUMINANCE_AOV_IMAGE_INDEX, rgba32f) uniform image2D LuminanceAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_RENDERABLE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D RenderableIndexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_PRIMITIVE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D PrimitiveIndexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_MATERIAL_INDEX_IMAGE_INDEX, rgba32f) uniform image2D MaterialindexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_DEBUG_LAYER_IMAGE_INDEX, rgba32f) uniform image2D DebugLayerImage;


layout (push_constant) uniform PushConstantsBlock
{
    FViewportResolutionPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    const uint TotalSize = PushConstants.Width * PushConstants.Height;

    if (PixelIndex >= TotalSize)
    {
        return;
    }

    uvec2 PixelCoords = uvec2(PixelIndex % PushConstants.Width, PixelIndex / PushConstants.Width);

#ifdef DEBUG_PRINTF
    if (PixelCoords.x == PushConstants.Width / 2 && PixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
    }
#endif

    /// Shading normal
    vec4 NormalInWorldSpace = NormalAOVData[PixelIndex];
    NormalInWorldSpace.xyz = (NormalInWorldSpace.xyz + vec3(1)) * vec3(0.5);
    NormalInWorldSpace.xyz = clamp(NormalInWorldSpace.xyz, vec3(0), vec3(1));
    imageStore(ShadingNormalAOVImage, ivec2(PixelCoords), NormalInWorldSpace);

    /// Geometric normal
    /// TODO: For now, geometric normal and shading normal are the same, but when normal mapping will be added, they should be different
    imageStore(GeometricNormalAOVImage, ivec2(PixelCoords), NormalInWorldSpace);

    /// Texture coords
    vec2 TextureCoords = UVAOVData[PixelIndex];
    imageStore(UVAOVImage, ivec2(PixelCoords), vec4(TextureCoords, 0.f, 0.f));

    /// World space position
    vec4 WorldSpacePosition = vec4(WorldSpacePositionAOVData[PixelIndex].xyz, 0);
    imageStore(WorldSpacePositionAOVImage, ivec2(PixelCoords), WorldSpacePosition);

    /// Opacity
    /// We check agains INACTIVE_MATERIAL_INDEX because in the miss shader missed rays marked with INACTIVE_MATERIAL_INDEX.
    vec4 Opacity = MaterialIndexBuffer[PixelIndex] == (INACTIVE_MATERIAL_INDEX) ? vec4(0, 0, 0, 1) : vec4 (1, 1, 1, 1);
    imageStore(OpacityAOVImage, ivec2(PixelCoords), Opacity);

    /// Depth
    vec4 Depth = vec4(1);
    /// TODO: Later
    imageStore(DepthAOVImage, ivec2(PixelCoords), Depth);

    /// Albedo
    /// TODO: Later
    vec4 Albedo = vec4(1, 0, 1, 1);
    imageStore(AlbedoAOVImage, ivec2(PixelCoords), Albedo);

    /// Luminance
    /// TODO: Later
    vec4 Luminance = vec4(1, 1, 0, 1);
    imageStore(LuminanceAOVImage, ivec2(PixelCoords), Luminance);

    /// Renderable ID
    uint RenderableIdColorHash = MurMur3_32(HitsBuffer[PixelIndex].RenderableIndex, 0);
    vec4 RenderableIdColor = vec4(0);
    RenderableIdColor.x = ((RenderableIdColorHash >> 24) & 0xFF) / 255.;
    RenderableIdColor.y = ((RenderableIdColorHash >> 18) & 0xFF) / 255.;
    RenderableIdColor.z = ((RenderableIdColorHash >> 12) & 0xFF) / 255.;
    imageStore(RenderableIndexAOVImage, ivec2(PixelCoords), RenderableIdColor);

    /// Primitive ID
    uint PrimitiveIdColorHash = MurMur3_32(HitsBuffer[PixelIndex].PrimitiveIndex, 0);
    vec4 PrimitiveIdColor = vec4(0);
    PrimitiveIdColor.x = ((PrimitiveIdColorHash >> 24) & 0xFF) / 255.;
    PrimitiveIdColor.y = ((PrimitiveIdColorHash >> 18) & 0xFF) / 255.;
    PrimitiveIdColor.z = ((PrimitiveIdColorHash >> 12) & 0xFF) / 255.;
    imageStore(PrimitiveIndexAOVImage, ivec2(PixelCoords), PrimitiveIdColor);

    /// Material ID
    uint MaterialIdColorHash = MurMur3_32(MaterialIndexBuffer[PixelIndex], 0);
    vec4 MaterialIdColor = vec4(0);
    MaterialIdColor.x = ((MaterialIdColorHash >> 24) & 0xFF) / 255.;
    MaterialIdColor.y = ((MaterialIdColorHash >> 18) & 0xFF) / 255.;
    MaterialIdColor.z = ((MaterialIdColorHash >> 12) & 0xFF) / 255.;
    imageStore(MaterialindexAOVImage, ivec2(PixelCoords), MaterialIdColor);

    /// Debug layer data
    vec4 DebugData = DebugLayerData[PixelIndex];
    imageStore(DebugLayerImage, ivec2(PixelCoords), DebugData);
}
