#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"
#include "random.h"

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_NORMAL_BUFFER) buffer NormalAOVDataBufferObject
{
    vec4 NormalAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_BUFFER) buffer UVAOVDataBufferObject
{
    vec2 UVAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_BUFFER) buffer WorldSpacePositionAOVDataBufferObject
{
    vec4 WorldSpacePositionAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_HITS_BUFFER) buffer HitsBufferObject
{
    FHit HitsBuffer[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_MATERIAL_INDEX_BUFFER) buffer MaterialIndexBufferObject
{
    uint MaterialIndexBuffer[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_DEBUG_LAYER_BUFFER) buffer DebugLayerBufferObject
{
    vec4 DebugLayerData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D NormalAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_AOV_IMAGE_INDEX, rg32f) uniform image2D UVAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_AOV_IMAGE_INDEX, rgba32f) uniform image2D WorldSpacePositionAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_RENDERABLE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D RenderableIndexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_PRIMITIVE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D PrimitiveIndexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_MATERIAL_INDEX_IMAGE_INDEX, rgba32f) uniform image2D MaterialindexAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_DEBUG_LAYER_IMAGE_INDEX, rgba32f) uniform image2D DebugLayerImage;


layout (push_constant) uniform PushConstantsBlock
{
    FViewportResolutionPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    const uint TotalSize = PushConstants.Width * PushConstants.Height;

    if (PixelIndex >= TotalSize)
    {
        return;
    }

    uvec2 PixelCoords = uvec2(PixelIndex % PushConstants.Width, PixelIndex / PushConstants.Width);

#ifdef DEBUG_PRINTF
    if (PixelCoords.x == PushConstants.Width / 2 && PixelCoords.y == PushConstants.Height)
    {
        b = true;
    }
#endif

    vec4 NormalInWorldSpace = NormalAOVData[PixelIndex];
    NormalInWorldSpace.xyz = (NormalInWorldSpace.xyz + vec3(1)) * vec3(0.5);
    NormalInWorldSpace.xyz = clamp(NormalInWorldSpace.xyz, vec3(0), vec3(1));

    vec2 TextureCoords = UVAOVData[PixelIndex];
    vec4 WorldSpacePosition = WorldSpacePositionAOVData[PixelIndex];
    uint RenderableIdColorHash = MurMur3_32(HitsBuffer[PixelIndex].RenderableIndex, 0);
    vec4 RenderableIdColor = vec4(1.);
    RenderableIdColor.x = ((RenderableIdColorHash >> 24) & 0xFF) / 255.;
    RenderableIdColor.y = ((RenderableIdColorHash >> 18) & 0xFF) / 255.;
    RenderableIdColor.z = ((RenderableIdColorHash >> 12) & 0xFF) / 255.;
    uint PrimitiveIdColorHash = MurMur3_32(HitsBuffer[PixelIndex].PrimitiveIndex, 0);
    vec4 PrimitiveIdColor = vec4(1.);
    PrimitiveIdColor.x = ((PrimitiveIdColorHash >> 24) & 0xFF) / 255.;
    PrimitiveIdColor.y = ((PrimitiveIdColorHash >> 18) & 0xFF) / 255.;
    PrimitiveIdColor.z = ((PrimitiveIdColorHash >> 12) & 0xFF) / 255.;
    uint MaterialIdColorHash = MurMur3_32(MaterialIndexBuffer[PixelIndex], 0);
    vec4 MaterialIdColor = vec4(1.);
    MaterialIdColor.x = ((MaterialIdColorHash >> 24) & 0xFF) / 255.;
    MaterialIdColor.y = ((MaterialIdColorHash >> 18) & 0xFF) / 255.;
    MaterialIdColor.z = ((MaterialIdColorHash >> 12) & 0xFF) / 255.;
    vec4 DebugData = DebugLayerData[PixelIndex];

    imageStore(NormalAOVImage, ivec2(PixelCoords), NormalInWorldSpace);
    imageStore(UVAOVImage, ivec2(PixelCoords), vec4(TextureCoords, 0.f, 0.f));
    imageStore(WorldSpacePositionAOVImage, ivec2(PixelCoords), WorldSpacePosition);
    imageStore(RenderableIndexAOVImage, ivec2(PixelCoords), RenderableIdColor);
    imageStore(PrimitiveIndexAOVImage, ivec2(PixelCoords), PrimitiveIdColor);
    imageStore(MaterialindexAOVImage, ivec2(PixelCoords), MaterialIdColor);
    imageStore(DebugLayerImage, ivec2(PixelCoords), DebugData);
}
