#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_NORMAL_BUFFER) buffer NormalAOVDataBufferObject
{
    vec4 NormalAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_BUFFER) buffer UVAOVDataBufferObject
{
    vec2 UVAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_BUFFER) buffer WorldSpacePositionAOVDataBufferObject
{
    vec4 WorldSpacePositionAOVData[];
};

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D NormalAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_UV_AOV_IMAGE_INDEX, rg32f) uniform image2D UVAOVImage;

layout (set = AOV_PASS_LAYOUT_INDEX, binding = AOV_PASS_WORLD_SPACE_POSITION_AOV_IMAGE_INDEX, rgba32f) uniform image2D WorldSpacePositionAOVImage;


layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    const uint TotalSize = PushConstants.Width * PushConstants.Height;

    if (PixelIndex >= TotalSize)
    {
        return;
    }

    uvec2 PixelCoords = uvec2(PixelIndex % PushConstants.Width, PixelIndex / PushConstants.Width);

    vec4 NormalInWorldSpace = NormalAOVData[PixelIndex];
    vec2 TextureCoords = UVAOVData[PixelIndex];
    vec4 WorldSpacePosition = WorldSpacePositionAOVData[PixelIndex];

    imageStore(NormalAOVImage, ivec2(PixelCoords), NormalInWorldSpace);
    imageStore(UVAOVImage, ivec2(PixelCoords), vec4(TextureCoords, 0.f, 0.f));
    imageStore(WorldSpacePositionAOVImage, ivec2(PixelCoords), WorldSpacePosition);
}