#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = INCOMING_IMAGE_TO_SAMPLE, rgba32f) uniform readonly image2D IncomingImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ACCUMULATE_IMAGE_INDEX, rgba32f) uniform image2D AccumulatorImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ESTIMATED_IMAGE_INDEX, rgba32f) uniform writeonly image2D EstimatedImage;

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    ivec2 UV = ivec2(gl_GlobalInvocationID.x % PushConstants.Width, gl_GlobalInvocationID.x / PushConstants.Width);

    vec4 AccumulatedValue = imageLoad(AccumulatorImage, UV);
    vec4 IncomingValue = imageLoad(IncomingImage, UV);

    if (IncomingValue.w != 0)
    {
        /// Tone mapping
        IncomingValue.xyz = IncomingValue.xyz / (vec3(1) + IncomingValue.xyz);
        /// Gamma correction
        IncomingValue.xyz = pow(IncomingValue.xyz, vec3(1.f / 2.2f));
    }

    AccumulatedValue += vec4(IncomingValue.xyz, 1.f);
    vec3 EstimatedValue = AccumulatedValue.xyz / AccumulatedValue.w;

    imageStore(AccumulatorImage, UV, AccumulatedValue);
    imageStore(EstimatedImage, UV, vec4(EstimatedValue, 1.f));
}