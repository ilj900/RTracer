#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#include "debug.h"
#include "common_defines.h"
#include "common_structures.h"

layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = INCOMING_IMAGE_TO_SAMPLE, rgba32f) uniform readonly image2D IncomingImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ACCUMULATE_IMAGE_INDEX, rgba32f) uniform image2D AccumulatorImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ESTIMATED_IMAGE_INDEX, rgba32f) uniform writeonly image2D EstimatedImage;

layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = UTILITY_BUFFER_INDEX) uniform UtilityDataUniformBufferObject
{
    FUtilityData UtilityData;
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

vec3 ACESToneMapping(vec3 Value)
{
    Value *= 0.6f;
    const float A = 2.51f;
    const float B = 0.03f;
    const float C = 2.43f;
    const float D = 0.59f;
    const float E = 0.14f;

    return clamp((Value * (A * Value + B))/(Value * (C * Value + D) + E), 0.0f, 1.0f);
}

void main()
{
    ivec2 PixelCoords = ivec2(gl_GlobalInvocationID.x % PushConstants.Width, gl_GlobalInvocationID.x / PushConstants.Width);

    #ifdef DEBUG_PRINTF
    if (PixelCoords.x == PushConstants.Width / 2 && PixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
    }
    #endif

    #ifdef DEBUG_ONLY_FIRST_BOUNCE
    if (PushConstants.BounceIndex != 0)
    {
        b = false;
    }
    #endif

    vec4 AccumulatedValue = imageLoad(AccumulatorImage, PixelCoords);
    vec4 IncomingValue = imageLoad(IncomingImage, PixelCoords);

    if (IncomingValue.w != 0)
    {
        /// Tone mapping
        IncomingValue.xyz = ACESToneMapping(IncomingValue.xyz);
        /// Gamma correction
        IncomingValue.xyz = pow(IncomingValue.xyz, vec3(1.f / 2.2f));
    }

    vec3 EstimatedValue = vec3(0);

    if (UtilityData.AccumulateFrames == 1u)
    {
        AccumulatedValue += vec4(IncomingValue.xyz, 1.f);
        EstimatedValue = AccumulatedValue.xyz / AccumulatedValue.w;
    }
    else
    {
        EstimatedValue = IncomingValue.xyz;
    }

    imageStore(AccumulatorImage, PixelCoords, AccumulatedValue);
    imageStore(EstimatedImage, PixelCoords, vec4(EstimatedValue, 1.f));
}