#version 460

#include "common_defines.h"

layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = INCOMING_IMAGE_TO_SAMPLE, rgba32f) uniform image2D IncomingImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ACCUMULATE_IMAGE_INDEX, rgba32f) uniform image2D AccumulatorImage;
layout (set = ACCUMULATE_PER_FRAME_LAYOUT_INDEX, binding = ESTIMATED_IMAGE_INDEX, rgba32f) uniform image2D EstimatedImage;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    ivec2 UV = ivec2(gl_GlobalInvocationID.xy);

    vec4 AccumulatedValue = imageLoad(AccumulatorImage, UV);
    vec4 IncomingValue = imageLoad(IncomingImage, UV);

    AccumulatedValue += vec4(IncomingValue.xyz, 1.f);
    vec3 EstimatedValue = AccumulatedValue.xyz / AccumulatedValue.w;

    imageStore(AccumulatorImage, UV, AccumulatedValue);
    imageStore(EstimatedImage, UV, vec4(EstimatedValue, 1.f));
}