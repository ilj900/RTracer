#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_OUTPUT_IMAGE_INDEX, rgba32f) uniform writeonly image2D OutcomingImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_SAMPLER_LINEAR_INDEX) uniform sampler2D IBLTextureSamplerLinear;
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_SAMPLER_NEAREST_INDEX) uniform sampler2D IBLTextureSamplerNearest;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_MAP) buffer readonly MaterialIndexBufferObject
{
    uint MaterialsIndexMap[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_AOV_MAP) buffer MaterialIndexAOVBufferObject
{
    uint MaterialsIndexAOV[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIALS_OFFSETS) buffer readonly MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_PREVIOUS_BOUNCE_NORMAL_AOV_DATA_BUFFER) buffer PreviousBounceNormalAOVDataBufferObject
{
    vec4 PreviousBounceNormalAOVData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_CUMULATIVE_MATERIAL_COLOR_BUFFER_INDEX) buffer CumulativeMaterialColorBufferObject
{
    vec4 CumulativeMaterialColorBuffer[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void MarkRayMissed(uint RayIndex)
{
    RayData[RayIndex].RayFlags |= RAY_DATA_RAY_MISSED;
}

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_GlobalInvocationID.x;

    if (OriginalPixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    uint NewPixelIndex = MaterialsIndexMap[OriginalPixelIndex];
    uint MaterialIndex = MaterialsIndexAOV[NewPixelIndex];

    if (MaterialIndex != PushConstants.MaterialIndex)
    {
        return;
    }

    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

    FRayData RayData = FetchRayData(NewPixelIndex);
    float Phi = atan(RayData.Direction.z, RayData.Direction.x);
    Phi += M_PI_2;
    float Theta = acos(RayData.Direction.y);
    Phi /= M_2_PI;
    Theta /= M_PI;

    #ifdef DEBUG_PRINTF

    if (NewPixelCoords.x == PushConstants.Width / 2 && NewPixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
        //debugPrintfEXT("RayData.Direction is %f, %f, %f\n", RayData.Direction.x, RayData.Direction.y, RayData.Direction.z);
        //debugPrintfEXT("Phi and Theta is %f, %f\n\n", Phi, Theta);
    }
    #endif

    vec3 SampledColor = vec3(1, 0, 1);
    float NDotI = dot(PreviousBounceNormalAOVData[NewPixelIndex].xyz, RayData.Direction.xyz);

    if (PushConstants.BounceIndex == 0)
    {
        SampledColor = vec3(texture(IBLTextureSamplerLinear, vec2(Phi, Theta)));
    }
    else
    {
        SampledColor = vec3(texture(IBLTextureSamplerNearest, vec2(Phi, Theta)));
        SampledColor *= abs(NDotI);
    }

    vec3 CumulativeMaterialColor = CumulativeMaterialColorBuffer[NewPixelIndex].xyz;

    vec3 ThroughputColor = ThroughputBuffer[NewPixelIndex].xyz;

    if (b)
    {
        debugPrintfEXT("PreviousBounceNormalAOVData: %f, %f, %f\n", PreviousBounceNormalAOVData[NewPixelIndex].x, PreviousBounceNormalAOVData[NewPixelIndex].y, PreviousBounceNormalAOVData[NewPixelIndex].z);
        debugPrintfEXT("RayData.Direction: %f, %f, %f\n", RayData.Direction.x, RayData.Direction.y, RayData.Direction.z);
        debugPrintfEXT("ThroughputColor after: %f, %f, %f\n", ThroughputColor.x, ThroughputColor.y, ThroughputColor.z);
        debugPrintfEXT("SampledColor after: %f, %f, %f\n", SampledColor.x, SampledColor.y, SampledColor.z);
        debugPrintfEXT("CumulativeMaterialColor after: %f, %f, %f\n\n", CumulativeMaterialColor.x, CumulativeMaterialColor.y, CumulativeMaterialColor.z);
    }
    imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(ThroughputColor + CumulativeMaterialColor * SampledColor, PushConstants.BounceIndex == 0 ? 0.f : 1.f));

    MarkRayMissed(NewPixelIndex);
    MaterialsIndexAOV[NewPixelIndex] = TOTAL_MATERIALS - 1;
}