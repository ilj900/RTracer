#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_OUTPUT_IMAGE_INDEX, rgba32f) uniform writeonly image2D OutcomingImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_INDEX) uniform sampler2D IBITextureSampler;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_MAP) buffer readonly MaterialIndexBufferObject
{
    uint MaterialsIndexMap[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_AOV_MAP) buffer MaterialIndexAOVBufferObject
{
    uint MaterialsIndexAOV[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIALS_OFFSETS) buffer readonly MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void MarkRayMissed(uint RayIndex)
{
    RayData[RayIndex].RayFlags |= RAY_DATA_RAY_MISSED;
}

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_GlobalInvocationID.x;

    if (OriginalPixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    uint NewPixelIndex = MaterialsIndexMap[OriginalPixelIndex];
    uint MaterialIndex = MaterialsIndexAOV[NewPixelIndex];

    if (MaterialIndex != PushConstants.MaterialIndex)
    {
        return;
    }

    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

    vec3 NormalizedDirection = FetchRayData(NewPixelIndex).Direction.xyz;
    float Tmp = atan(NormalizedDirection.z, NormalizedDirection.x);
    float Phi = Tmp < 0.f ? (Tmp + (2 * 3.14159265357)) : Tmp;
    float Theta = acos(NormalizedDirection.y);
    Phi /= 2.f * 3.14159265357;
    Theta /= 3.14159265357;

    imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(vec3(texture(IBITextureSampler, vec2(Phi, Theta))), 1.f));

    MarkRayMissed(NewPixelIndex);
    MaterialsIndexAOV[NewPixelIndex] = TOTAL_MATERIALS - 1;
}