#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

vec4 DebugGlobal0 = vec4(0);
vec4 DebugGlobal1 = vec4(0);
vec4 DebugGlobal2 = vec4(0);
vec4 DebugGlobal3 = vec4(0);
vec4 DebugGlobal4 = vec4(0);
vec4 DebugGlobal5 = vec4(0);
vec4 DebugGlobal6 = vec4(0);
vec4 DebugGlobal7 = vec4(0);

#include "common_defines.h"
#include "common_structures.h"
#include "glsl_math.h"

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_SAMPLER_LINEAR_INDEX) uniform sampler2D IBLTextureSamplerLinear;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_MAP) buffer readonly MaterialIndexBufferObject
{
    uint MaterialsIndexMap[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_AOV_MAP) buffer MaterialIndexAOVBufferObject
{
    uint MaterialsIndexAOV[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIALS_OFFSETS) buffer readonly MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

/// TODO: Not needed?
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_PREVIOUS_BOUNCE_NORMAL_AOV_DATA_BUFFER) buffer PreviousBounceNormalAOVDataBufferObject
{
    vec4 PreviousBounceNormalAOVData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_CUMULATIVE_MATERIAL_COLOR_BUFFER_INDEX) buffer CumulativeMaterialColorBufferObject
{
    vec4 CumulativeMaterialColorBuffer[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_OUTPUT_IMAGE_INDEX, rgba32f) uniform writeonly image2D OutcomingImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_AOV_RGBA32F_IMAGE_INDEX, rgba32f) uniform image2D AOV_RGBA32F_Image;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_UTILITY_BUFFER_INDEX) uniform UtilityDataUniformBufferObject
{
    FUtilityData UtilityData;
};

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void MarkRayMissed(uint RayIndex)
{
    RayData[RayIndex].RayFlags |= RAY_DATA_RAY_MISSED;
}

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};
/// TODO: Is "local_size_x = BASIC_CHUNK_SIZE" correct?
layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void SaveAOVs(uvec2 PixelCoords)
{
    switch (UtilityData.AOVIndex)
    {
        case AOV_SHADING_NORMAL:
        case AOV_GEOMETRIC_NORMAL:
        case AOV_UV_COORDS:
        case AOV_WORLD_SPACE_POSITION:
        case AOV_OPACITY:
        case AOV_DEPTH:
        case AOV_MATERIAL_ALBEDO:
        case AOV_LUMINANCE:
        case AOV_RENDERABLE_INDEX:
        case AOV_PRIMITIVE_INDEX:
        case AOV_MATERIAL_INDEX: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), vec4(0)); break; }
        case AOV_DEBUG_LAYER_0: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal0); break; }
        case AOV_DEBUG_LAYER_1: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal1); break; }
        case AOV_DEBUG_LAYER_2: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal2); break; }
        case AOV_DEBUG_LAYER_3: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal3); break; }
        case AOV_DEBUG_LAYER_4: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal4); break; }
        case AOV_DEBUG_LAYER_5: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal5); break; }
        case AOV_DEBUG_LAYER_6: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal6); break; }
        case AOV_DEBUG_LAYER_7: { imageStore(AOV_RGBA32F_Image, ivec2(PixelCoords), DebugGlobal7); break; }
    }
}

void main()
{
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_GlobalInvocationID.x;

    if (OriginalPixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    uint NewPixelIndex = MaterialsIndexMap[OriginalPixelIndex];
    uint MaterialIndex = MaterialsIndexAOV[NewPixelIndex];

    if (MaterialIndex != PushConstants.MaterialIndex)
    {
        return;
    }

    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

#ifdef DEBUG_PRINTF
    if (NewPixelCoords.x == PushConstants.Width / 2 && NewPixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
        //debugPrintfEXT("PushConstants.BounceIndex: %i\n", PushConstants.BounceIndex);
    }
#endif

    if (PushConstants.BounceIndex == 0)
    {
        FRayData RayData = FetchRayData(NewPixelIndex);
        vec2 IBLUV = Vec3ToSphericalUV(RayData.Direction.xyz, M_PI_2);
        vec3 SampledColor = vec3(texture(IBLTextureSamplerLinear, IBLUV));
        imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(SampledColor, 0.f));
    }
    else
    {
        vec3 ThroughputColor = ThroughputBuffer[NewPixelIndex].xyz;
        imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(ThroughputColor, 1.f));
    }

    MarkRayMissed(NewPixelIndex);
    MaterialsIndexAOV[NewPixelIndex] = INACTIVE_MATERIAL_INDEX;

    if (PushConstants.BounceIndex == 0)
    {
        SaveAOVs(NewPixelCoords);
    }
}