#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_RAYS_BUFFER_INDEX) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_SAMPLER_LINEAR_INDEX) uniform sampler2D IBLTextureSamplerLinear;
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_IBL_IMAGE_SAMPLER_NEAREST_INDEX) uniform sampler2D IBLTextureSamplerNearest;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_MAP) buffer readonly MaterialIndexBufferObject
{
    uint MaterialsIndexMap[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_AOV_MAP) buffer MaterialIndexAOVBufferObject
{
    uint MaterialsIndexAOV[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIALS_OFFSETS) buffer readonly MaterialsOffsetsBufferObject
{
    uint MaterialsOffsets[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_PREVIOUS_BOUNCE_NORMAL_AOV_DATA_BUFFER) buffer PreviousBounceNormalAOVDataBufferObject
{
    vec4 PreviousBounceNormalAOVData[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_CUMULATIVE_MATERIAL_COLOR_BUFFER_INDEX) buffer CumulativeMaterialColorBufferObject
{
    vec4 CumulativeMaterialColorBuffer[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_OUTPUT_IMAGE_INDEX, rgba32f) uniform writeonly image2D OutcomingImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_SHADING_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D ShadingNormalAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_GEOMETRIC_NORMAL_AOV_IMAGE_INDEX, rgba32f) uniform image2D GeometricNormalAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_UV_AOV_IMAGE_INDEX, rg32f) uniform image2D UVAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_WORLD_SPACE_POSITION_AOV_IMAGE_INDEX, rgba32f) uniform image2D WorldSpacePositionAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_OPACITY_AOV_IMAGE_INDEX, rgba32f) uniform image2D OpacityAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_DEPTH_AOV_IMAGE_INDEX, rgba32f) uniform image2D DepthAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_ALBEDO_AOV_IMAGE_INDEX, rgba32f) uniform image2D AlbedoAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_LUMINANCE_AOV_IMAGE_INDEX, rgba32f) uniform image2D LuminanceAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_RENDERABLE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D RenderableIndexAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_PRIMITIVE_INDEX_IMAGE_INDEX, rgba32f) uniform image2D PrimitiveIndexAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_MATERIAL_INDEX_IMAGE_INDEX, rgba32f) uniform image2D MaterialindexAOVImage;

layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_DEBUG_LAYER_IMAGE_0_INDEX, rgba32f) uniform image2D DebugLayerImage0;
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_DEBUG_LAYER_IMAGE_1_INDEX, rgba32f) uniform image2D DebugLayerImage1;
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_DEBUG_LAYER_IMAGE_2_INDEX, rgba32f) uniform image2D DebugLayerImage2;
layout (set = COMPUTE_MISS_LAYOUT_INDEX, binding = COMPUTE_MISS_DEBUG_LAYER_IMAGE_3_INDEX, rgba32f) uniform image2D DebugLayerImage3;

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void MarkRayMissed(uint RayIndex)
{
    RayData[RayIndex].RayFlags |= RAY_DATA_RAY_MISSED;
}

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};
/// TODO: Is "local_size_x = BASIC_CHUNK_SIZE" correct?
layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

void SaveAOVs(uvec2 PixelCoords, vec4 DebugData0, vec4 DebugData1, vec4 DebugData2, vec4 DebugData3)
{
    imageStore(ShadingNormalAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(GeometricNormalAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(UVAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(WorldSpacePositionAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(OpacityAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(DepthAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(AlbedoAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(LuminanceAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(RenderableIndexAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(PrimitiveIndexAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(MaterialindexAOVImage, ivec2(PixelCoords), vec4(0));
    imageStore(DebugLayerImage0, ivec2(PixelCoords), DebugData0);
    imageStore(DebugLayerImage1, ivec2(PixelCoords), DebugData1);
    imageStore(DebugLayerImage2, ivec2(PixelCoords), DebugData2);
    imageStore(DebugLayerImage3, ivec2(PixelCoords), DebugData3);
}

void main()
{
    uint OriginalPixelIndex = MaterialsOffsets[PushConstants.MaterialIndex] + gl_GlobalInvocationID.x;

    if (OriginalPixelIndex >= PushConstants.TotalSize)
    {
        return;
    }

    uint NewPixelIndex = MaterialsIndexMap[OriginalPixelIndex];
    uint MaterialIndex = MaterialsIndexAOV[NewPixelIndex];

    if (MaterialIndex != PushConstants.MaterialIndex)
    {
        return;
    }

    uvec2 NewPixelCoords = uvec2(NewPixelIndex % PushConstants.Width, NewPixelIndex / PushConstants.Width);

    FRayData RayData = FetchRayData(NewPixelIndex);
    float Phi = atan(RayData.Direction.z, RayData.Direction.x);
    Phi += M_PI_2;
    float Theta = acos(RayData.Direction.y);
    Phi /= M_2_PI;
    Theta /= M_PI;

#ifdef DEBUG_PRINTF
    if (NewPixelCoords.x == PushConstants.Width / 2 && NewPixelCoords.y == PushConstants.Height / 2)
    {
        b = true;
        debugPrintfEXT("PushConstants.BounceIndex: %i\n", PushConstants.BounceIndex);
    }
#endif

    vec3 SampledColor = vec3(1, 0, 1);

    if (PushConstants.BounceIndex == 0)
    {
        SampledColor = vec3(texture(IBLTextureSamplerNearest, vec2(Phi, Theta)));
    }
    else
    {
        SampledColor = vec3(texture(IBLTextureSamplerNearest, vec2(Phi, Theta)));
        float NDotI = dot(PreviousBounceNormalAOVData[NewPixelIndex].xyz, RayData.Direction.xyz);
        SampledColor *= abs(NDotI);
    }

    vec3 CumulativeMaterialColor = CumulativeMaterialColorBuffer[NewPixelIndex].xyz;
    vec3 ThroughputColor = ThroughputBuffer[NewPixelIndex].xyz;
    vec3 Result = ThroughputColor + CumulativeMaterialColor * SampledColor;

    imageStore(OutcomingImage, ivec2(NewPixelCoords), vec4(Result, PushConstants.BounceIndex == 0 ? 0.f : 1.f));

    MarkRayMissed(NewPixelIndex);
    MaterialsIndexAOV[NewPixelIndex] = INACTIVE_MATERIAL_INDEX;

    if (PushConstants.BounceIndex == 0)
    {
        SaveAOVs(NewPixelCoords, vec4(0), vec4(0), vec4(0), vec4(0));
    }
}