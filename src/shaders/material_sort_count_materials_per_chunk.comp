#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (set = MATERIAL_SORT_COUNT_MATERIALS_PER_CHUNK_INDEX, binding = MATERIAL_SORT_COUNT_MATERIALS_MATERIAL_INDICES_AOV_BUFFER) buffer MaterialIndicesAOVBufferObject
{
    uint MaterialIndicesAOV[];
};

layout (set = MATERIAL_SORT_COUNT_MATERIALS_PER_CHUNK_INDEX, binding = MATERIAL_SORT_COUNT_MATERIALS_MATERIAL_COUNT_BUFFER) buffer MaterialCountBufferObject
{
    uint MaterialCount[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstantsCountMaterialsPerChunk PushConstantsCountMaterialsPerChunk;
};

layout (local_size_x = BASIC_CHUNK_SIZE, local_size_y = 1, local_size_z = 1) in;

/// Here we calculate how much of each material we have in each chunk
void main()
{
    uint PixelIndex = gl_GlobalInvocationID.x;
    
    if (PixelIndex >= PushConstantsCountMaterialsPerChunk.TotalSize)
    {
        return;
    }

    uint MaterialIndex = MaterialIndicesAOV[PixelIndex];

    uint XPos = PixelIndex / BASIC_CHUNK_SIZE;
    uint YPos = (MaterialIndex == UINT_MAX) ? (TOTAL_MATERIALS - 1) : MaterialIndex;
    uint BufferIndex = YPos * PushConstantsCountMaterialsPerChunk.MaxGroupSize + XPos;
    atomicAdd(MaterialCount[BufferIndex], 1);
}