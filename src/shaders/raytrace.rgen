#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (location = 0) rayPayloadEXT FHitPayload HitPayload;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_TLAS_LAYOUT_INDEX) uniform accelerationStructureEXT TopLevelAS;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_RAYS_DATA_BUFFER) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_HIT_BUFFER) buffer HitBufferObject
{
    FHit HitData[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_MATERIAL_INDEX_BUFFER) buffer MaterialIndicesAOVBufferObject
{
    uint MaterialIndicesAOV[];
};

FRayData FetchRayData(uint RayIndex)
{
    return RayData[RayIndex];
}

void main()
{
    uint RayIndex = gl_LaunchIDEXT.x;
    FRayData RayData = FetchRayData(RayIndex);

    if ((RayData.RayFlags & RAY_DATA_RAY_MISSED) == RAY_DATA_RAY_MISSED)
    {
        MaterialIndicesAOV[RayIndex] = TOTAL_MATERIALS - 1;
        return;
    }

    traceRayEXT(TopLevelAS, RayData.RayFlags, 0xFF, 0, 0, 0, RayData.Origin.xyz, RayData.TMin, RayData.Direction.xyz, RayData.TMax, 0);

    HitData[RayIndex].RenderableIndex = HitPayload.RenderableIndex;
    HitData[RayIndex].PrimitiveIndex = HitPayload.PrimitiveIndex;
    HitData[RayIndex].HitUV = HitPayload.HitUV;
    MaterialIndicesAOV[RayIndex] = HitPayload.MaterialIndex;
}
