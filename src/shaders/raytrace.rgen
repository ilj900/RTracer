#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "common_defines.h"
#include "common_structures.h"

layout (location = 0) rayPayloadEXT FHit Hit;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_TLAS_LAYOUT_INDEX) uniform accelerationStructureEXT TopLevelAS;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_RAYS_DATA_BUFFER) buffer RaysBufferObject
{
    FRayData RayData[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_HIT_BUFFER) buffer HitBufferObject
{
//TODO: Possibly separate into HitDana and HitPayload
    FHit HitData[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_MATERIAL_INDEX_BUFFER) buffer MaterialIndexBufferObject
{
    uint MaterialIndices[];
};

void main()
{
    uint RayIndex = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
    FRayData RayData = RayData[RayIndex];

    traceRayEXT(TopLevelAS, RayData.RayFlags, 0xFF, 0, 0, 0, RayData.Origin.xyz, RayData.TMin, RayData.Direction.xyz, RayData.TMax, 0);

    HitData[RayIndex] = Hit;
    MaterialIndices[RayIndex] = Hit.MaterialIndex;
}
