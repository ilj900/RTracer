#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#define DEBUG_PRINTF
#ifdef DEBUG_PRINTF
#extension GL_EXT_debug_printf : enable
bool b = false;
#endif

#include "common_defines.h"
#include "common_structures.h"
#include "random.h"

layout (location = 0) rayPayloadEXT FHitPayload HitPayload;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_TLAS_LAYOUT_INDEX) uniform accelerationStructureEXT TLAS;

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_RAYS_DATA_BUFFER) buffer RaysBufferObject
{
    FRayData RayDataBuffer[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_PIXEL_INDEX_BUFFER) buffer PixelIndexIndexMapBufferObject
{
    uint PixelIndexIndexMap[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_HIT_BUFFER) buffer HitBufferObject
{
    FHit HitData[];
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_MATERIAL_INDEX_BUFFER) buffer MaterialIndicesAOVBufferObject
{
    uint MaterialIndicesAOV[];
};


layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_CAMERA_POSITION_BUFFER) uniform CameraBufferObject
{
    FDeviceCamera DeviceCamera;
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_RENDER_ITERATION_BUFFER) buffer RenderIterationBufferObject
{
    uint RenderIteration;
};

layout (set = RAYTRACE_LAYOUT_INDEX, binding = RAYTRACE_THROUGHPUT_BUFFER) buffer ThroughputBufferObject
{
    vec4 ThroughputBuffer[];
};

layout (push_constant) uniform PushConstantsBlock
{
    FPushConstants PushConstants;
};

void main()
{
    uint OriginalPixelIndex = gl_LaunchIDEXT.x;
    uint NewPixelIndex = PixelIndexIndexMap[OriginalPixelIndex];

    FRayData RayData;

    if (PushConstants.BounceIndex == 0)
    {
        NewPixelIndex = OriginalPixelIndex;
        uvec2 PixelCoords = uvec2(OriginalPixelIndex % PushConstants.Width, OriginalPixelIndex / PushConstants.Width);
        vec2 PixelCoordsF = PixelCoords / vec2(PushConstants.Width, PushConstants.Height);
        /// -= vec2(0.5) so that the center would be (0, 0) and top-left corner (-.5, -.5)
        PixelCoordsF -= vec2(0.5);

        FSamplingState SamplingState = FSamplingState(RenderIteration, 0, 0, OriginalPixelIndex, SAMPLE_TYPE_GENERATE_RAYS);
        vec2 RandomUnitSquare = Sample2DUnitQuad(SamplingState);
        const vec2 PixelJitter = (RandomUnitSquare - vec2(0.5)) / vec2(PushConstants.Width, PushConstants.Height);
        PixelCoordsF += PixelJitter;

        vec4 RayOrigin = vec4(DeviceCamera.Origin, 1.f);
        /// We need to adjust height of the sensor cause the framebuffer's aspect ratio might be different from the sensor's one
        const float AdjustedSensorSizeY = DeviceCamera.SensorSizeY * ((DeviceCamera.SensorSizeX / DeviceCamera.SensorSizeY) / (float(PushConstants.Width) / float(PushConstants.Height)));
        vec3 SensorCenter = DeviceCamera.Direction * DeviceCamera.FocalDistance;
        /// "- DeviceCamera.Up * ..." cause we start from the top-left corner
        vec3 PixelCenterCameraSpace = SensorCenter + DeviceCamera.Right * DeviceCamera.SensorSizeX * PixelCoordsF.x - DeviceCamera.Up * AdjustedSensorSizeY * PixelCoordsF.y;

        vec4 RayDirection = vec4(normalize(PixelCenterCameraSpace), 1);

        float tMin = FLOAT_EPSILON;
        float tMax = 10000.f;

        RayData = FRayData(RayOrigin, RayDirection, 0u, tMin, tMax, 1.f);

        RayDataBuffer[OriginalPixelIndex] = RayData;
        ThroughputBuffer[OriginalPixelIndex] = vec4(0, 0, 0, 1);
        PixelIndexIndexMap[OriginalPixelIndex] = OriginalPixelIndex;
    }
    else
    {
        RayData = RayDataBuffer[NewPixelIndex];

        if ((RayData.RayFlags & RAY_DATA_RAY_MISSED) == RAY_DATA_RAY_MISSED)
        {
            MaterialIndicesAOV[NewPixelIndex] = INACTIVE_MATERIAL_INDEX;
            return;
        }
    }

    traceRayEXT(TLAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, RayData.Origin.xyz, RayData.TMin, RayData.Direction.xyz, RayData.TMax, 0);

    HitData[NewPixelIndex].RenderableIndex = HitPayload.RenderableIndex;
    HitData[NewPixelIndex].PrimitiveIndex = HitPayload.PrimitiveIndex;
    HitData[NewPixelIndex].HitUV = HitPayload.HitUV;
    MaterialIndicesAOV[NewPixelIndex] = HitPayload.MaterialIndex;
}
