#version 460#extension GL_EXT_ray_tracing : requirestruct HitPayload{    vec3 HitValue;};layout (binding = 0, set = 0) uniform accelerationStructureEXT TopLevelAS;layout (binding = 1, set = 0) uniform CameraBufferObject{    mat4 ViewMatrix;    mat4 ProjectionMatrix;} CameraBuffer;layout (binding = 2, set = 0, rgba32f) uniform image2D Image;layout (location = 0) rayPayloadEXT HitPayload PRD;void main(){    const vec2 PixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);    const vec2 InUV = PixelCenter/vec2(gl_LaunchSizeEXT.xy);    vec2 D = InUV * 2.0f - 1.f;    vec4 Origin = inverse(CameraBuffer.ViewMatrix) * vec4(0.f, 0.f, 0.f, 1.f);    vec4 Target = inverse(CameraBuffer.ProjectionMatrix) * vec4(D.x, D.y, 1.f, 1.f);    vec4 Direction = inverse(CameraBuffer.ViewMatrix) * vec4(normalize(Target.xyz), 0.f);    uint RayFlags = gl_RayFlagsOpaqueEXT;    float tMin = 0.001f;    float tMax = 10000.f;    traceRayEXT(TopLevelAS, RayFlags, 0xFF, 0, 0, 0, Origin.xyz, tMin, Direction.xyz, tMax, 0);    imageStore(Image, ivec2(gl_LaunchIDEXT.xy), vec4(PRD.HitValue, 1.f));}